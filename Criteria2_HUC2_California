// Load HUC-2 boundaries
var huc2 = ee.FeatureCollection("USGS/WBD/2017/HUC02");

// Define the California HUC2 region using HUC2 code '18'
var californiaHUC2 = huc2.filter(ee.Filter.eq('huc2', '18')).geometry();

// Simplify the region geometry to reduce computation load
var simplifiedCaliforniaHUC2 = californiaHUC2.simplify(500);  // Reduce simplification tolerance for better detail

// Define the date range for a single year (reduce the range to limit data)
var yearStartDate = '2021-01-01';
var yearEndDate = '2021-12-31';

// Load the NLCD dataset to mask out urban areas, water, farmlands, and pastures
var nlcd = ee.Image('USGS/NLCD_RELEASES/2019_REL/NLCD/2019');
var exclusionMask = nlcd.select('landcover').eq(21)  // Urban areas
  .or(nlcd.select('landcover').eq(22))
  .or(nlcd.select('landcover').eq(23))
  .or(nlcd.select('landcover').eq(24))
  .or(nlcd.select('landcover').eq(11))  // Water bodies
  .or(nlcd.select('landcover').eq(81))  // Pasture/Hay
  .or(nlcd.select('landcover').eq(82)); // Cultivated Crops

// Cloud masking and scaling
function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(31).eq(0); // Updated for 5-bit mask
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask)
      .updateMask(exclusionMask.not());  // Exclude urban areas, water, farmlands, and pastures
}

// Function to compute NDVI
function computeNDVI(image) {
  var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
  return image.addBands(ndvi);
}

// Function to process the California region with optimizations
function processRegion(regionGeom, regionName) {
  var landsatCollection = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
    .filterBounds(regionGeom)
    .filterDate(yearStartDate, yearEndDate)
    .filter(ee.Filter.lt('CLOUD_COVER', 10))  // Relaxed cloud cover filter
    .map(maskL8sr)
    .map(computeNDVI);

  var stdDevNDVIYear = landsatCollection.select('NDVI').reduce(ee.Reducer.stdDev());
  var stdDevNDVIYearClipped = stdDevNDVIYear.clip(regionGeom);

  // Sample points for k-means clustering at a higher scale (30m for better resolution)
  var training = stdDevNDVIYearClipped.sample({
    region: regionGeom,
    scale: 30,  // Reduced scale to 30 meters for better resolution
    numPixels: 500,  // Reduced number of sample points
    geometries: true
  });

  // Apply k-means clustering
  var clusterer = ee.Clusterer.wekaKMeans(5).train(training);
  var clustered = stdDevNDVIYearClipped.cluster(clusterer);

  // Sort the clusters based on the standard deviation value
  var sortedClusterIndices = ee.List.sequence(0, 4);
  
  // Assign ranks to clusters (1 = highest std dev, 5 = lowest std dev)
  var clusterRanks = ee.List.sequence(1, 5);  // Ranks from 1 (highest std dev) to 5 (lowest std dev)
  var rankedClusters = clustered.remap(sortedClusterIndices, clusterRanks);

  // Define visualization parameters for the ranked clusters (Flipped Colorbar)
  var clusterVisParams = {
    min: 1,
    max: 5,
    palette: ['#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b']  // Flipped shades of green
  };

  // Add the ranked clustered NDVI layer to the map
  Map.addLayer(rankedClusters, clusterVisParams, 'Ranked Clusters of NDVI Std Dev 2021 ' + regionName);

  // Create a separate layer for rank 5 clusters only
  var rank5Clusters = rankedClusters.updateMask(rankedClusters.eq(5));
  var rank5VisParams = {
    min: 5,
    max: 5,
    palette: ['#00441b']  // Dark green for rank 5
  };

  // Add the rank 5 clusters to the map
  Map.addLayer(rank5Clusters, rank5VisParams, 'Rank 5 Clusters (Lowest Std Dev)');

  // Return the ranked clusters image
  return rankedClusters;
}

// Process the California region with simplified geometry and higher resolution
var processedRegion = processRegion(simplifiedCaliforniaHUC2, 'California HUC2');

// Export the clustered image as a TIFF file
Export.image.toDrive({
  image: processedRegion,  // Image to export
  description: 'Ranked_NDVI_StdDev_Clusters_California',  // Task description
  scale: 30,  // 30-meter resolution
  region: simplifiedCaliforniaHUC2,  // The region to export
  fileFormat: 'GeoTIFF',  // Output file format
  crs: 'EPSG:4326',  // Coordinate reference system (WGS 84)
  maxPixels: 1e13  // Max number of pixels (large limit to accommodate the export)
});

// Create legends for the ranked clusters
var createColorBar = function(palette, min, max, title) {
  var colorBar = ui.Panel({
    widgets: [
      ui.Label(min.toString()),
      ui.Thumbnail({
        image: ee.Image.pixelLonLat().select(0).multiply(0).add(ee.Image.pixelLonLat().select(0)),
        params: {
          bbox: [0, 0, 1, 0.1],
          dimensions: '100x10',
          format: 'png',
          min: 0,
          max: 1,
          palette: palette,
        },
        style: {stretch: 'horizontal', margin: '0 8px'},
      }),
      ui.Label(max.toString())
    ],
    layout: ui.Panel.Layout.flow('horizontal')
  });
  
  var legendTitle = ui.Label({
    value: title,
    style: {fontWeight: 'bold', fontSize: '12px', margin: '4px 8px'}
  });

  var legendPanel = ui.Panel({
    widgets: [legendTitle, colorBar],
    style: {position: 'bottom-right', padding: '8px 15px'}
  });
  
  return legendPanel;
};

// Add the updated colorbar legend (Flipped)
var rankedClustersLegendPanel = createColorBar(['#d9f0d3', '#a6dba0', '#5aae61', '#1b7837', '#00441b'], 1, 5, 'Ranked Clusters of NDVI Std Dev');
Map.add(rankedClustersLegendPanel);

// Center the map on the simplified California HUC2 region
Map.centerObject(simplifiedCaliforniaHUC2, 6);
