// Define the geometries for the regions
var regions = {
  southwestUS: ee.Geometry.Rectangle([-125, 31, -102, 37]),
  pacificNorthwest: ee.Geometry.Rectangle([-125, 42, -116, 49]),
  california: ee.Geometry.Rectangle([-125, 32, -114, 42]),
  wyoming: ee.Geometry.Rectangle([-111, 40, -104, 45]),
  montana: ee.Geometry.Rectangle([-116, 44, -104, 49]),
  centralUS: ee.Geometry.Rectangle([-104, 33, -89, 49]),
  texas: ee.Geometry.Rectangle([-106, 25, -93, 37]),
  utah: ee.Geometry.Rectangle([-114, 37, -109, 42]),
  colorado: ee.Geometry.Rectangle([-109, 36, -102, 41]),
  midwest: ee.Geometry.Rectangle([-104, 36, -80, 49]),
  eastCoast: ee.Geometry.Rectangle([-85, 25, -66, 45]),
  florida: ee.Geometry.Rectangle([-87, 24, -79, 31]),
  atlanta: ee.Geometry.Rectangle([-85, 33, -83, 35]),
  mississippi: ee.Geometry.Rectangle([-91, 30, -88, 35]),
  alabama: ee.Geometry.Rectangle([-88, 30, -85, 35]),
  idaho: ee.Geometry.Rectangle([-117, 42, -111, 49]),
  louisiana: ee.Geometry.Rectangle([-94, 28, -88, 33]),
  tennessee: ee.Geometry.Rectangle([-90, 34, -81, 37]),
  memphis: ee.Geometry.Rectangle([-91, 34, -89, 36]),
  kansas: ee.Geometry.Rectangle([-102, 36, -94, 41]),
  conway: ee.Geometry.Point([-92.4421, 35.0887]).buffer(50000),
  tallahassee: ee.Geometry.Point([-84.2807, 30.4383]).buffer(50000)
};

// Define the date ranges for the dry and wet seasons
var dryStartDate = '2021-03-01';
var dryEndDate = '2021-05-31';
var wetStartDate = '2021-10-01';
var wetEndDate = '2021-12-31';
var yearStartDate = '2021-01-01';
var yearEndDate = '2021-12-31';

// Load the NLCD dataset
var nlcd = ee.Image('USGS/NLCD_RELEASES/2019_REL/NLCD/2019');
var urbanMask = nlcd.select('landcover').eq(21)
  .or(nlcd.select('landcover').eq(22))
  .or(nlcd.select('landcover').eq(23))
  .or(nlcd.select('landcover').eq(24));

// Cloud masking and scaling
function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  return image.addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask)
      .updateMask(urbanMask.not());
}

// Function to compute NDVI
function computeNDVI(image) {
  var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
  return image.addBands(ndvi);
}

// Function to apply PCA on NDVI data
function applyPCA(imageCollection, regionGeom) {
  var arrayImage = imageCollection.toArray();
  var axis = 0;
  var means = arrayImage.arrayReduce(ee.Reducer.mean(), [axis]);
  var centered = arrayImage.subtract(means);
  var covarArray = centered.arrayReduce(ee.Reducer.centeredCovariance(), [axis]);
  var covarMatrix = covarArray.arrayGet([0, 0]);
  var eigens = covarMatrix.eigen();
  var eigenValues = eigens.slice(1, 0, 1);
  var eigenVectors = eigens.slice(1, 1);
  var pca = centered.matrixMultiply(eigenVectors);
  var pcImage = pca.arrayProject([1]).arrayFlatten([['pc1', 'pc2', 'pc3', 'pc4', 'pc5']]);
  
  return pcImage.clip(regionGeom);
}

// Function to process each region
function processRegion(regionGeom, regionName) {
  var landsatCollection = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
    .filterBounds(regionGeom)
    .filterDate(yearStartDate, yearEndDate)
    .filter(ee.Filter.lt('CLOUD_COVER', 10))
    .map(maskL8sr)
    .map(computeNDVI);

  var pcaImage = applyPCA(landsatCollection.select('NDVI'), regionGeom);
  var pc1 = pcaImage.select('pc1');

  var visParams = {
    min: -2,
    max: 2,
    palette: ['blue', 'white', 'green']
  };

  Map.addLayer(pc1, visParams, 'PCA - PC1 NDVI ' + regionName);
}

// Process each region
for (var regionName in regions) {
  processRegion(regions[regionName], regionName);
}

// Create legends for the PCA
var createColorBar = function(palette, min, max, title) {
  var colorBar = ui.Panel({
    widgets: [
      ui.Label(min),
      ui.Thumbnail({
        image: ee.Image.pixelLonLat().select(0).multiply(0).add(ee.Image.pixelLonLat().select(0)),
        params: {
          bbox: [0, 0, 1, 0.1],
          dimensions: '100x10',
          format: 'png',
          min: 0,
          max: 1,
          palette: palette,
        },
        style: {stretch: 'horizontal', margin: '0 8px'},
      }),
      ui.Label(max.toString())
    ],
    layout: ui.Panel.Layout.flow('horizontal')
  });
  
  var legendTitle = ui.Label({
    value: title,
    style: {fontWeight: 'bold', fontSize: '12px', margin: '4px 8px'}
  });

  var legendPanel = ui.Panel({
    widgets: [legendTitle, colorBar],
    style: {position: 'bottom-right', padding: '8px 15px'}
  });
  
  return legendPanel;
};

var pcaLegendPanel = createColorBar(['blue', 'white', 'green'], -2, 2, 'PCA - PC1 NDVI');
Map.add(pcaLegendPanel);

// Add the NLCD land cover layer
var nlcdVisParams = {
  min: 0,
  max: 95,
  palette: [
    '466b9f', 'd1defa', 'decaca', 'd99482', 'ee0000', 'ab0000', 'b3ac9f', '68ab5f', '1c6330', 'b5ca8f',
    '6e9d58', '476818', 'bad9eb', '70a3ba', 'dcd93d', 'ab7028', 'a3a3a3', 'bebebe', 'd8d8d8', 'f5f5f5'
  ],
  opacity: 0.5
};
Map.addLayer(nlcd.select('landcover'), nlcdVisParams, 'NLCD Land Cover');

// Create NLCD legend
var nlcdLegend = ui.Panel({
  style: {
    position: 'top-left',
    padding: '8px 15px'
  }
});
var nlcdLegendTitle = ui.Label({
  value: 'NLCD Land Cover',
  style: {fontWeight: 'bold', fontSize: '12px', margin: '4px 8px'}
});
nlcdLegend.add(nlcdLegendTitle);
var nlcdPalette = [
  {color: '466b9f', name: 'Open Water'},
  {color: 'd1defa', name: 'Perennial Ice/Snow'},
  {color: 'decaca', name: 'Developed, Open Space'},
  {color: 'd99482', name: 'Developed, Low Intensity'},
  {color: 'ee0000', name: 'Developed, Medium Intensity'},
  {color: 'ab0000', name: 'Developed, High Intensity'},
  {color: 'b3ac9f', name: 'Barren Land (Rock/Sand/Clay)'},
  {color: '68ab5f', name: 'Deciduous Forest'},
  {color: '1c6330', name: 'Evergreen Forest'},
  {color: 'b5ca8f', name: 'Mixed Forest'},
  {color: '6e9d58', name: 'Shrub/Scrub'},
  {color: '476818', name: 'Herbaceous'},
  {color: 'bad9eb', name: 'Hay/Pasture'},
  {color: '70a3ba', name: 'Cultivated Crops'},
  {color: 'dcd93d', name: 'Woody Wetlands'},
  {color: 'ab7028', name: 'Emergent Herbaceous Wetlands'},
  {color: 'a3a3a3', name: 'Unconsolidated Shore'},
  {color: 'bebebe', name: 'Disturbed'},
  {color: 'd8d8d8', name: 'Forest/Shrub/Scrub - Post-Fire Regeneration'},
  {color: 'f5f5f5', name: 'Non-Vegetated - High Latitude Aquatic Bed'}
];
nlcdPalette.forEach(function(item) {
  nlcdLegend.add(ui.Panel({
    widgets: [
      ui.Label({
        style: {
          backgroundColor: item.color,
          padding: '8px',
          margin: '0 0 4px 0'
        }
      }),
      ui.Label({
        value: item.name,
        style: {margin: '0 0 4px 6px'}
      })
    ],
    layout: ui.Panel.Layout.Flow('horizontal')
  }));
});
Map.add(nlcdLegend);
