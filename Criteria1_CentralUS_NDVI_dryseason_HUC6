// Load the GRIDMET Drought: CONUS Drought Indices dataset
var droughtData = ee.ImageCollection('GRIDMET/DROUGHT');

// Load HUC-6 boundaries
var huc6 = ee.FeatureCollection("USGS/WBD/2017/HUC06");

// Filter HUC-6 boundaries by the Central US and Texas regions
var huc6CentralUS = huc6.filterBounds(ee.Geometry.Rectangle([-103, 36, -89, 49]));
var huc6Texas = huc6.filterBounds(ee.Geometry.Rectangle([-106, 25, -93, 37]));

// Simplify the HUC-6 boundaries to reduce complexity
var simplifiedHUC6CentralUS = huc6CentralUS.map(function(feature) {
  return feature.simplify(1000);  // Adjust tolerance as needed
});
var simplifiedHUC6Texas = huc6Texas.map(function(feature) {
  return feature.simplify(1000);  // Adjust tolerance as needed
});

// Define the date range for the dry season in Central US and Texas (June to August)
var dryStartDate = '2021-06-01';
var dryEndDate = '2021-08-31';

// Load the SRTM Digital Elevation Data
var srtm = ee.Image('USGS/SRTMGL1_003');

// Define a land mask: elevation > 0
var landMask = srtm.gt(0);

// Cloud masking and scaling function
function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  return image.updateMask(qaMask).updateMask(saturationMask)
      .addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true);
}

// Function to compute NDVI
function computeNDVI(image) {
  var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
  return ndvi;
}

// Load Landsat 8 Collection 2 Level 2 data for the dry season and filter by date and cloud cover
var landsatCollection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate(dryStartDate, dryEndDate)
  .filter(ee.Filter.lt('CLOUD_COVER', 20)
  .map(maskL8sr)
  .map(computeNDVI);

// Compute the median NDVI for the dry season
var medianNDVI = landsatCollection.median().select('NDVI');

// Function to perform clustering for a given HUC-6 feature
function clusterHUC6(feature) {
  var huc6Geom = feature.geometry();
  var clippedNDVI = medianNDVI.clip(huc6Geom);
  
  // Sample NDVI within the HUC-6 region
  var training = clippedNDVI.sample({
    region: huc6Geom,
    scale: 30,
    numPixels: 500,  // Reduced number of sample points
    geometries: true
  });
  
  // Check if training data is available server-side
  var hasData = training.size().gt(0);
  
  // Run k-means clustering and handle both cases
  var result = ee.Algorithms.If(
    hasData,
    // Run clustering and return ranked clusters
    ee.Image(clippedNDVI.cluster(ee.Clusterer.wekaKMeans(5).train(training))).clip(huc6Geom),
    // No data, return a blank image for consistency
    ee.Image.constant(0).clip(huc6Geom)
  );
  
  return ee.Image(result).rename('clustered');
}

// Map the function over the HUC-6 FeatureCollections
var clustersCentralUS = simplifiedHUC6CentralUS.map(clusterHUC6);
var clustersTexas = simplifiedHUC6Texas.map(clusterHUC6);

// Convert the FeatureCollection of images to ImageCollection
var imageListCentralUS = clustersCentralUS.map(function(feature) {
  return ee.Image(feature);
});
var imageListTexas = clustersTexas.map(function(feature) {
  return ee.Image(feature);
});

var rankedClustersCentralUS = ee.ImageCollection(imageListCentralUS);
var rankedClustersTexas = ee.ImageCollection(imageListTexas);

// Define visualization parameters for clusters
var clusterVisParams = {
  min: 1,
  max: 5,
  palette: ['red', 'orange', 'yellow', 'green', 'darkgreen']
};

// Define NDVI visualization parameters using jet color palette
var ndviParams = {
  min: -1,
  max: 1,
  palette: ['#000080', '#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000', '#800000']
};

// Define visualization parameters for HUC-6 boundaries
var huc6VisParams = {
  color: 'black',
  width: 1,
  fillColor: '00000000'
};

// Add HUC-6 boundaries to the map
Map.addLayer(simplifiedHUC6CentralUS.style(huc6VisParams), {}, 'HUC-6 Boundaries Central US');
Map.addLayer(simplifiedHUC6Texas.style(huc6VisParams), {}, 'HUC-6 Boundaries Texas');

// Add NDVI layer for each pixel to the map
Map.addLayer(medianNDVI.clipToCollection(simplifiedHUC6CentralUS).visualize(ndviParams), {}, 'NDVI Central US');
Map.addLayer(medianNDVI.clipToCollection(simplifiedHUC6Texas).visualize(ndviParams), {}, 'NDVI Texas');

// Add ranked clustered NDVI layers to the map using mosaic
Map.addLayer(rankedClustersCentralUS.mosaic(), clusterVisParams, 'Ranked Clustered NDVI Central US');
Map.addLayer(rankedClustersTexas.mosaic(), clusterVisParams, 'Ranked Clustered NDVI Texas');

// Merge HUC-6 geometries to center the map
var mergedGeometry = ee.Geometry(simplifiedHUC6CentralUS.geometry().union(simplifiedHUC6Texas.geometry()));
Map.centerObject(mergedGeometry, 5);

// Create a legend for the ranked clustered NDVI
var legend = ui.Panel({style: {position: 'bottom-right', padding: '8px 15px'}});
var legendTitle = ui.Label({value: 'Ranked NDVI Clusters', style: {fontWeight: 'bold', fontSize: '12px'}});

var makeRow = function(color, name) {
  var colorBox = ui.Label({
    style: {
      backgroundColor: color,
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  var description = ui.Label({
    value: name,
    style: {margin: '0 0 4px 6px'}
  });

  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

var clusterColors = ['red', 'orange', 'yellow', 'green', 'darkgreen'];
var clusterNames = ['Very Low Vegetation (Rank 1)', 'Low Vegetation (Rank 2)', 'Moderate Vegetation (Rank 3)', 'High Vegetation (Rank 4)', 'Very High Vegetation (Rank 5)'];

legend.add(legendTitle);
for (var i = 0; i < clusterColors.length; i++) {
  legend.add(makeRow(clusterColors[i], clusterNames[i]));
}

Map.add(legend);

// Print the clustered images to the console for verification
print('Ranked Clustered NDVI Central US:', rankedClustersCentralUS);
print('Ranked Clustered NDVI Texas:', rankedClustersTexas);
