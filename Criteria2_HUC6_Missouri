// Load the GRIDMET Drought: CONUS Drought Indices dataset
var droughtData = ee.ImageCollection('GRIDMET/DROUGHT');

// --- HUC-6 Operations ---

// Define the HUC-6 region for Missouri River Basin (Filter for HUC-6 starting with '10')
var missouriHUC6 = ee.FeatureCollection("USGS/WBD/2017/HUC06")
  .filter(ee.Filter.stringStartsWith('huc6', '10'))  // Ensure only Missouri River Basin HUC-6 codes are included
  .map(function(feature) {
    return feature.simplify(1000);  // Simplify the geometry to reduce complexity
  });

// Load the SRTM 30m Digital Elevation Data
var srtm = ee.Image('USGS/SRTMGL1_003');

// Clip the DEM to the Missouri River Basin HUC-6 boundaries
var clippedDEMHUC6 = srtm.clipToCollection(missouriHUC6);

// Define visualization parameters for the DEM
var demVisParams = {
  min: 0,
  max: 4000,
  palette: ['000000', '0000FF', '00FFFF', '00FF00', 'FFFF00', 'FF8000', 'FF0000', 'FFFFFF']
};

// Add the DEM layer to the map for HUC-6
Map.addLayer(clippedDEMHUC6, demVisParams, '30m DEM Missouri River Basin HUC-6');

// Center the map on the Missouri River Basin HUC-6 region
Map.centerObject(missouriHUC6, 7);

// Add the HUC-6 boundaries to the map as a FeatureCollection
Map.addLayer(missouriHUC6.style({color: '000000', width: 2, fillColor: '00000000'}), {}, 'Missouri River Basin HUC-6 Boundary');

// Function to compute NDVI using Landsat 8 bands (SR_B5 and SR_B4)
function computeNDVI(image) {
  var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
  return ndvi;
}

// Define the date range for the dry season in the Missouri River Basin region
var dryStartDate = '2021-10-01';
var dryEndDate = '2021-11-30';

// Load Landsat 8 Collection 2 surface reflectance data for the dry season
var landsat8Collection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate(dryStartDate, dryEndDate)
  .filter(ee.Filter.lt('CLOUD_COVER', 80))
  .map(function(image) {
    // Apply scaling factors to Landsat Collection 2 data
    return image
      .select(['SR_B5', 'SR_B4'])
      .multiply(0.0000275)
      .add(-0.2)
      .copyProperties(image, ['system:time_start']);
  })
  .map(computeNDVI);

// Compute the median NDVI for the dry season for HUC-6
var medianNDVIHUC6 = landsat8Collection.median().select('NDVI');

// Load the NLCD dataset (2019 version)
var nlcd = ee.Image('USGS/NLCD_RELEASES/2019_REL/NLCD/2019');

// Create a mask to exclude urban, farmlands, and pastures
var excludedLandCovers = nlcd.select('landcover').eq(21)  // Developed, Open Space
  .or(nlcd.select('landcover').eq(22))  // Developed, Low Intensity
  .or(nlcd.select('landcover').eq(23))  // Developed, Medium Intensity
  .or(nlcd.select('landcover').eq(24))  // Developed, High Intensity
  .or(nlcd.select('landcover').eq(81))  // Pasture/Hay
  .or(nlcd.select('landcover').eq(82)); // Cultivated Crops

// Apply the NLCD mask to the NDVI image
var maskedNDVIHUC6 = medianNDVIHUC6.updateMask(excludedLandCovers.not());

// Sample points for clustering
var samplePoints = 2000;
var scale = 30;  // Spatial resolution of 30 meters

// Function to apply clustering to each HUC-6 unit
function applyClustering(huc6Region) {
  var regionGeometry = huc6Region.geometry();
  
  // Clip the masked NDVI image to the current HUC-6 boundaries
  var clippedNDVI = maskedNDVIHUC6.clip(regionGeometry);
  
  // Sample points for clustering
  var trainingHUC6 = clippedNDVI.sample({
    region: regionGeometry,
    scale: scale,  // Adjust the scale to capture more data points
    numPixels: samplePoints,  // Increased number of sample points for better clustering
    geometries: true
  });

  // Apply k-means clustering if there are valid samples
  if (trainingHUC6.size().gt(0)) {
    var clustererHUC6 = ee.Clusterer.wekaKMeans(5).train(trainingHUC6);
    var clusteredHUC6 = clippedNDVI.cluster(clustererHUC6).add(1).int16(); // Shift cluster values from 0-4 to 1-5 and cast to int16

    // Define visualization parameters for clustering
    var clusterVisParams = {
      min: 1,
      max: 5,
      palette: ['B0B0B0', 'D3D3D3', 'FFFF00', '00FF00', '008000']  // Grey, Lighter Grey, Yellow, Green, Dark Green
    };

    // Add the clustered NDVI layer to the map for the current HUC-6 region
    Map.addLayer(clusteredHUC6.visualize(clusterVisParams), {}, 'Clustered NDVI HUC-6: ' + huc6Region.get('name'));

    // Export the clustered image to Google Drive
    Export.image.toDrive({
      image: clusteredHUC6,
      description: 'Clustered_NDVI_HUC6_' + huc6Region.get('huc6').getInfo(),  // Unique description per region
      folder: 'EarthEngineExports',  // Folder in Google Drive
      fileNamePrefix: 'Clustered_NDVI_HUC6_' + huc6Region.get('huc6').getInfo(),  // Prefix for the exported file
      scale: 30,  // 30 meters spatial resolution
      region: regionGeometry,  // The geometry of the current HUC-6 region
      maxPixels: 1e13,  // Maximum number of pixels
      crs: 'EPSG:4326',  // CRS (coordinate reference system)
      fileFormat: 'GeoTIFF'  // Export as GeoTIFF
    });
  } else {
    print('No data found for clustering in HUC-6: ', huc6Region.get('name'));
  }
}

// Iterate through each HUC-6 unit and apply clustering
missouriHUC6.evaluate(function(huc6Features) {
  huc6Features.features.forEach(function(feature) {
    applyClustering(ee.Feature(feature));
  });
});

// Add the masked NDVI layer for the entire Missouri River Basin HUC-6 region to the map
var ndviParams = {
  min: -1,
  max: 1,
  palette: ['#000080', '#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000', '#800000']
};
Map.addLayer(maskedNDVIHUC6.clipToCollection(missouriHUC6).visualize(ndviParams), {}, 'Masked NDVI Missouri River Basin HUC-6');

// Create Clustering legend
var clusterColors = ['#B0B0B0', '#D3D3D3', '#FFFF00', '#00FF00', '#008000'];  // Grey, Lighter Grey, Yellow, Green, Dark Green
var clusterLabels = ['Very Low NDVI', 'Low NDVI', 'Moderate NDVI', 'High NDVI', 'Very High NDVI'];

var clusterLegend = ui.Panel({
  style: {position: 'bottom-right', padding: '8px 15px'}
});

clusterLegend.add(ui.Label('NDVI Clusters', {fontWeight: 'bold'}));

for (var i = 0; i < clusterColors.length; i++) {
  var colorBox = ui.Label({
    style: {backgroundColor: clusterColors[i], padding: '8px', margin: '0 0 4px 0'}
  });
  var description = ui.Label({
    value: clusterLabels[i],
    style: {margin: '0 0 4px 6px'}
  });
  clusterLegend.add(ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  }));
}

// Add the clustering legend to the map
Map.add(clusterLegend);
