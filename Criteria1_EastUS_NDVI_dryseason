// Define the geometry for the East Coast
var eastCoast = ee.Geometry.Rectangle([-82, 25, -66, 45]);

// Define the date range for the dry season in the East Coast (July to September)
var dryStartDate = '2021-07-01';
var dryEndDate = '2021-09-30';

// Load the SRTM Digital Elevation Data
var srtm = ee.Image('USGS/SRTMGL1_003');

// Define a land mask: elevation > 0
var landMask = srtm.gt(0);

// Cloud masking and scaling function
function maskL8sr(image) {
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('11111', 2)).eq(0);
  var saturationMask = image.select('QA_RADSAT').eq(0);

  var opticalBands = image.select('SR_B.').multiply(0.0000275).add(-0.2);
  var thermalBands = image.select('ST_B.*').multiply(0.00341802).add(149.0);

  return image.updateMask(qaMask).updateMask(saturationMask)
      .addBands(opticalBands, null, true)
      .addBands(thermalBands, null, true);
}

// Function to compute NDVI
function computeNDVI(image) {
  var ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI');
  return ndvi;
}

// Load Landsat 8 Collection 2 Level 2 data for the dry season and filter by date and cloud cover
var landsatCollection = ee.ImageCollection('LANDSAT/LC08/C02/T1_L2')
  .filterDate(dryStartDate, dryEndDate)
  .filter(ee.Filter.lt('CLOUD_COVER', 5))
  .map(maskL8sr)
  .map(computeNDVI);

// Compute the median NDVI for the dry season
var medianNDVI = landsatCollection.median().select('NDVI');

// Load HUC-6 boundaries
var huc6 = ee.FeatureCollection("USGS/WBD/2017/HUC06");

// Filter HUC-6 boundaries by the East Coast region
var huc6EastCoast = huc6.filterBounds(eastCoast);

// Simplify the HUC-6 boundaries to reduce complexity
var simplifiedHUC6EastCoast = huc6EastCoast.map(function(feature) {
  return feature.simplify(1000);  // Adjust tolerance as needed
});

// Clip the NDVI image to the simplified HUC-6 boundaries
var clippedNDVIEastCoast = medianNDVI.clipToCollection(simplifiedHUC6EastCoast);

// Define the region for sampling
var samplingRegionEastCoast = simplifiedHUC6EastCoast.geometry();

// Run k-means clustering with fewer sample points for the East Coast
var trainingEastCoast = clippedNDVIEastCoast.sample({
  region: samplingRegionEastCoast,
  scale: 30,
  numPixels: 500,  // Reduced number of sample points
  geometries: true
});

var clustererEastCoast = ee.Clusterer.wekaKMeans(5).train(trainingEastCoast);

var clusteredEastCoast = clippedNDVIEastCoast.cluster(clustererEastCoast);

// Calculate mean NDVI for each cluster in the East Coast
var clusterMeansEastCoast = ee.List.sequence(0, 4).map(function(clusterIndex) {
  var meanNDVI = clippedNDVIEastCoast.updateMask(clusteredEastCoast.eq(ee.Image.constant(clusterIndex))).reduceRegion({
    reducer: ee.Reducer.mean(),
    geometry: samplingRegionEastCoast,
    scale: 30,
    bestEffort: true
  }).get('NDVI');
  return ee.Feature(null, {clusterIndex: clusterIndex, meanNDVI: meanNDVI});
});

// Convert the list of features to a feature collection
var clusterMeanFeaturesEastCoast = ee.FeatureCollection(clusterMeansEastCoast);

// Sort the feature collection by mean NDVI
var sortedClusterMeansEastCoast = clusterMeanFeaturesEastCoast.sort('meanNDVI');

// Extract sorted cluster indices
var sortedClusterIndicesEastCoast = sortedClusterMeansEastCoast.aggregate_array('clusterIndex');

// Define cluster ranks
var clusterRanks = ee.List.sequence(1, 5);

// Create an image where each pixel is assigned the value of its respective group's rank
var rankedClustersEastCoast = clusteredEastCoast.remap(sortedClusterIndicesEastCoast, clusterRanks);

// Define cluster visualization parameters
var clusterVisParams = {
  min: 1,
  max: 5,
  palette: ['red', 'orange', 'yellow', 'green', 'darkgreen']
};

// Define NDVI visualization parameters using jet color palette
var ndviParams = {
  min: -1,
  max: 1,
  palette: ['#000080', '#0000FF', '#00FFFF', '#00FF00', '#FFFF00', '#FF0000', '#800000']
};

// Define visualization parameters for HUC-6 boundaries
var huc6VisParams = {
  color: 'black',
  width: 1,
  fillColor: '00000000'
};

// Add HUC-6 boundaries to the map
Map.addLayer(simplifiedHUC6EastCoast.style(huc6VisParams), {}, 'HUC-6 Boundaries East Coast');

// Add NDVI layer for each pixel to the map
Map.addLayer(clippedNDVIEastCoast.visualize(ndviParams), {}, 'NDVI East Coast');

// Add ranked clustered NDVI layer to the map
Map.addLayer(rankedClustersEastCoast.visualize(clusterVisParams), {}, 'Ranked Clustered NDVI East Coast');

// Center the map on the East Coast region to ensure proper display
Map.centerObject(eastCoast, 5);

// Create a legend for the ranked clustered NDVI
var legend = ui.Panel({style: {position: 'bottom-right', padding: '8px 15px'}});
var legendTitle = ui.Label({value: 'Ranked NDVI Clusters', style: {fontWeight: 'bold', fontSize: '12px'}});

var makeRow = function(color, name) {
  var colorBox = ui.Label({
    style: {
      backgroundColor: color,
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  var description = ui.Label({
    value: name,
    style: {margin: '0 0 4px 6px'}
  });

  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

var clusterColors = ['red', 'orange', 'yellow', 'green', 'darkgreen'];
var clusterNames = ['Very Low Vegetation (Rank 1)', 'Low Vegetation (Rank 2)', 'Moderate Vegetation (Rank 3)', 'High Vegetation (Rank 4)', 'Very High Vegetation (Rank 5)'];

legend.add(legendTitle);
for (var i = 0; i < clusterColors.length; i++) {
  legend.add(makeRow(clusterColors[i], clusterNames[i]));
}

Map.add(legend);

// Print the clustered image to the console for verification
print('Clustered NDVI East Coast:', clusteredEastCoast);
print('Ranked Clustered NDVI East Coast:', rankedClustersEastCoast);
