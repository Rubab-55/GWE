// Load the United States shapefile
var states = ee.FeatureCollection("TIGER/2018/States");

// List of non-mainland states to exclude
var nonMainlandStates = ['Alaska', 'Hawaii', 'American Samoa', 'Commonwealth of the Northern Mariana Islands', 
                         'Guam', 'Puerto Rico', 'United States Virgin Islands'];

// Filter out the non-mainland states
var mainlandStates = states.filter(ee.Filter.inList('NAME', nonMainlandStates).not());

// Merge all mainland states into a single feature to represent the mainland US
var mainlandUS = mainlandStates.union().geometry();

// Add the mainland US boundary to the map
Map.addLayer(mainlandUS, {color: 'red'}, 'Mainland US Boundary');

// Center the map on the mainland US
Map.centerObject(mainlandUS, 4);

// Print the mainland US boundary geometry to the console
print('Mainland US Boundary:', mainlandUS);

// Define the date range for the Landsat 8 data (summer 2018)
var startDate = '2018-06-21';
var endDate = '2018-09-22';

// Load the updated Landsat 8 Collection 2 Level 2 dataset and filter by date and cloud cover
var landsatCollection = ee.ImageCollection("LANDSAT/LC08/C02/T1_L2")
  .filterBounds(mainlandUS)
  .filterDate(startDate, endDate)
  .filter(ee.Filter.lt('CLOUD_COVER', 5))
  .select(['SR_B5', 'SR_B4']);

// Apply the scaling factors to the surface reflectance bands
var landsatCollection = landsatCollection.map(function(image) {
  var nir = image.select('SR_B5').multiply(0.0000275).add(-0.2);
  var red = image.select('SR_B4').multiply(0.0000275).add(-0.2);
  var ndvi = nir.subtract(red).divide(nir.add(red)).rename('NDVI');
  return ndvi.copyProperties(image, image.propertyNames());
}).mean().clip(mainlandUS);

// Load the NLCD 2016 dataset
var nlcd = ee.Image('USGS/NLCD_RELEASES/2016_REL/2016')
  .select('landcover')
  .clip(mainlandUS);

// Define land cover types to mask out
var excludedClasses = [11, 12, 21, 22, 23, 24, 31];

// Create a mask for the excluded classes
var nlcdMask = nlcd.remap(excludedClasses, ee.List.repeat(0, excludedClasses.length), 1);

// Mask out the excluded classes from the NLCD image
var maskedNLCD = nlcd.updateMask(nlcdMask);

// Define visualization parameters for the NLCD data
var nlcdParams = {
  min: 0,
  max: 95,
  palette: [
    '466b9f', 'd1def8', 'dec5c5', 'd99282', 'eb0000', 'ab0000', 'b3ac9f', '68ab5f', '1c5f2c', 'b5ca8f',
    'a3cc51', '82ba9e', 'dcd93d', 'ab7028', 'bad9eb', '70a3ba', 'e9e9e9', 'dedede'
  ]
};

// Add the masked NLCD layer to the map
Map.addLayer(maskedNLCD, nlcdParams, 'Masked NLCD 2016');

// Mask the NDVI image using the same mask
var maskedNDVI = landsatCollection.updateMask(nlcdMask);

// Define NDVI visualization parameters
var ndviParams = {min: -1, max: 1, palette: ['blue', 'white', 'green']};

// Add the masked NDVI layer to the map
Map.addLayer(maskedNDVI, ndviParams, 'Masked NDVI Summer 2018');

// Print the masked NDVI image to the console
print('Masked NDVI Image:', maskedNDVI);

// Create a legend for the NLCD data
var legend = ui.Panel({
  style: {
    position: 'bottom-left',
    padding: '8px 15px'
  }
});

var legendTitle = ui.Label({
  value: 'NLCD Legend',
  style: {
    fontWeight: 'bold',
    fontSize: '18px',
    margin: '0 0 4px 0',
    padding: '0'
  }
});

legend.add(legendTitle);

var makeRow = function(color, name) {
  var colorBox = ui.Label({
    style: {
      backgroundColor: '#' + color,
      padding: '8px',
      margin: '0 0 4px 0'
    }
  });

  var description = ui.Label({
    value: name,
    style: {
      margin: '0 0 4px 6px'
    }
  });

  return ui.Panel({
    widgets: [colorBox, description],
    layout: ui.Panel.Layout.Flow('horizontal')
  });
};

var palette = nlcdParams.palette;
var names = [
  'Open Water', 'Perennial Ice/Snow', 'Developed, Open Space', 'Developed, Low Intensity',
  'Developed, Medium Intensity', 'Developed, High Intensity', 'Barren Land (Rock/Sand/Clay)',
  'Deciduous Forest', 'Evergreen Forest', 'Mixed Forest', 'Shrub/Scrub', 'Grassland/Herbaceous',
  'Pasture/Hay', 'Cultivated Crops', 'Woody Wetlands', 'Emergent Herbaceous Wetlands'
];

for (var i = 0; i < names.length; i++) {
  legend.add(makeRow(palette[i], names[i]));
}

Map.add(legend);
